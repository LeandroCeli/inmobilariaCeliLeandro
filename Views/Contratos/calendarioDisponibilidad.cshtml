@model int // Id del inmueble

@{
    ViewData["Title"] = "Calendario de disponibilidad";
    Layout = "~/Views/Shared/_Layout.cshtml"; // Ajustá según tu estructura
}

<h2>Calendario de disponibilidad</h2>

<div id="calendar" style="max-width: 900px; margin: auto;"></div>

<div class="mt-4 text-center">
    <label>Rango seleccionado:</label>
    <input type="text" id="rangoSeleccionado" class="form-control text-center" readonly />
    <button class="btn btn-success mt-3" id="btnConfirmarRango">Usar este rango</button>
</div>

@section Scripts {
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const inmuebleId = @Model;
            const calendarEl = document.getElementById('calendar');
            const rangoInput = document.getElementById('rangoSeleccionado');
            const btnConfirmar = document.getElementById('btnConfirmarRango');

            let rangoSeleccionado = null;

            fetch(`/api/inmuebles/${inmuebleId}/fechas-ocupadas`)
                .then(res => res.json())
                .then(data => {
                    const eventosOcupados = data.map(r => ({
                        title: 'Ocupado',
                        start: r.fechaInicio,
                        end: r.fechaFin,
                        color: '#ff4d4d',
                        allDay: true
                    }));

                    const calendar = new FullCalendar.Calendar(calendarEl, {
                        initialView: 'dayGridMonth',
                        locale: 'es',
                        selectable: true,
                        selectOverlap: false,
                        events: eventosOcupados,
                        select: function (info) {
                            const superpuesto = eventosOcupados.some(ev =>
                                (info.startStr < ev.end && info.endStr > ev.start)
                            );

                            if (superpuesto) {
                                alert("El rango seleccionado se superpone con fechas ocupadas.");
                                calendar.unselect();
                                rangoInput.value = "";
                                rangoSeleccionado = null;
                            } else {
                                rangoSeleccionado = {
                                    inicio: info.startStr,
                                    fin: info.endStr
                                };
                                rangoInput.value = `${info.startStr} a ${info.endStr}`;
                            }
                        }
                    });

                    calendar.render();
                });

            btnConfirmar.addEventListener("click", function () {
                if (!rangoSeleccionado) {
                    alert("Seleccioná un rango válido primero.");
                    return;
                }

                // Guardar en localStorage
                localStorage.setItem("rangoContrato", JSON.stringify(rangoSeleccionado));
                alert("Rango guardado. Volvé al formulario para continuar.");
                window.close();
            });
        });
    </script>
}